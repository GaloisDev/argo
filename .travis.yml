# Adapted from Stack's "complex configuration" .travis.yml file:
# https://docs.haskellstack.org/en/stable/travis_ci/

# Use new container infrastructure to enable caching
sudo: false

# Do not choose a language; we provide our own build tools.
language: generic

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $HOME/.ghcup
  - $TRAVIS_BUILD_DIR/.stack-work

# The actual build matrix

env:
  global:
  - CABAL_VERSION=2.4.1.0
  matrix:
  - GHC_VERSION=8.4.4 STACK_RESOLVER=12.26
  - GHC_VERSION=8.6.3 STACK_RESOLVER=13.11
  - GHC_VERSION=HEAD  STACK_RESOLVER=nightly
  matrix:
  - BUILD=cabal
  - BUILD=stack

os:
  - linux
  - osx

# Setting up the build environment

before_install:

# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# Update the submodules (not recursive)
- git submodule update --init

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHC_VERSION" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and install the stack executable
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi
  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

# Download and install the ghcup executable
- mkdir -p ~/.ghcup/bin && curl https://raw.githubusercontent.com/haskell/ghcup/master/ghcup > ~/.ghcup/bin/ghcup && chmod +x ~/.ghcup/bin/ghcup

# Add to PATH: ghcup, .local/bin (where stack lives), .cabal/bin (where cabal-installed things live)
- export PATH=$HOME/.ghcup/bin:$HOME/.local/bin:$HOME/.cabal/bin:$PATH

# Install the latest version of cabal and the correct version of GHC via ghcup
- ghcup install-cabal $CABAL_VERSION
- ghcup install $GHC_VERSION
- ghcup set $GHC_VERSION

install:
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  set -ex
  case "$BUILD" in
    stack)
      # Build the dependencies
      stack --no-terminal --install-ghc --resolver $STACK_RESOLVER $ARGS test --bench --only-dependencies
      ;;
    cabal)
      cabal --version
      travis_retry cabal update

      # Get the list of packages from the stack.yaml file. Note that
      # this will also implicitly run hpack as necessary to generate
      # the .cabal files needed by cabal-install.
      PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')

      cabal new-install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
      ;;
  esac
  set +ex

script:
- |
  set -ex
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
      ;;
    cabal)
      cabal new-install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

      ORIGDIR=$(pwd)
      for dir in $PACKAGES
      do
        cd $dir
        cabal check
        cabal new-sdist
        PKGVER=$(cabal info . | awk '{print $2;exit}')
        SRC_TGZ=$PKGVER.tar.gz
        cd dist
        tar zxfv "$SRC_TGZ"
        cd "$PKGVER"
        cabal new-configure --enable-tests --ghc-options -O0
        cabal new-build
        cabal new-test --show-details=streaming --log=/dev/stdout
        cd $ORIGDIR
      done
      ;;
  esac
  set +ex

# We handle submodules manually
git:
  submodules: false
